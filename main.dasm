; DCPU 1.7 emulator compliance test
; By Braden Shepherdson (shepheb) for TechCompliant.

; Calling convention: A, B and C can be overwritten, as can EX.
; X Y Z I J are preserved. First three parameters passed in A B C.
; Return values in A. Fourth parameter on top of the stack, fifth underneath it.
; Using C syntax, foo(1,2,3,4,5) looks like:
; set push, 5
; set push, 4
; set a, 1
; set b, 2
; set c, 3
; jsr foo

; General plan for tests:
; - All deliberate tests have a number, which is reported when they fail.
;   These numbers are all .define constants that start with T_
; - There are also numbered error states for non-tests, like PC ending up back
;   at 0.

; Tests are introduced with the header:
; mktest TEST_NAME, number
; That sets the [test] variable, and bumps [test_count].
.macro mktest=.define %0, %1 %n set [test], %0 %n add [test_count], 1

; ENTRY POINT
:reset_detected
  ; A bit of self-modifying code here.
  ; This detects if PC returns to 0 because of an emulator bug.
  set [reset_detected+0], 0x7F81 ; Write "SET PC,"
  set [reset_detected+1], why_did_we_reset ; Write imm16
  set pc, main

.include "hardware.dasm"
.include "display.dasm"

:main
set sp, 0xEF80
; Initialization
jsr init_hardware
jsr init_display

; Print the banner
set [color], bg_blue | fg_white
jsr print_pc
.dat "DCPU-16 EMULATOR COMPLIANCE TEST", 0
add [cursor], 32 ; Leave a blank line.

; Main block of tests.
jsr test_suite_branch_failures
jsr test_suite_branch_success
jsr test_suite_branch_nesting
jsr test_suite_arguments
jsr test_suite_math


; Tests all passed!
set [color], fg_blue | bg_white
set a, [test_count]
jsr print_number
jsr print_pc
.dat " tests passed",0

set pc, spin ; Infinite loop.



; Test numbers

; Holds the number of the most-recently-attempted test.
:test .dat -1
:test_count .dat 0


.include "test_branches.dasm"
.include "test_arguments.dasm"
.include "test_math.dasm"

; Things to test:
; - interrupts - probably use timer


; Called if we end up back at PC 0 for some reason.
:why_did_we_reset
ias 0
set [color], fg_red | bg_white
jsr print_pc
.dat 10
;     0123456789ABCDEF0123456789ABCDEF
.dat "DCPU reset detected! That is not"
.dat "supposed to happen.",0
set pc, spin


; Called when a test fails. Reports the error, then spins.
:fail ; () -> void
set [color], fg_red | bg_white
jsr print_pc
.dat "Test failed: ", 0
set a, [test]
jsr print_number
set pc, spin


; Loops forever.
:spin
sub pc, 1

